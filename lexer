Identifier
    =   IdentifierNondigit
        {(   IdentifierNondigit
        |   Digit
        )}
    ;

fragment
IdentifierNondigit
    =   Nondigit
    |   UniversalCharacterName
    ;

fragment
Nondigit
    =   (a-zA-Z_)
    ;

fragment
Digit
    =   (0-9)
    ;

fragment
UniversalCharacterName
    =   '\\u' HexQuad
    |   '\\U' HexQuad HexQuad
    ;

fragment
HexQuad
    =   HexadecimalDigit HexadecimalDigit HexadecimalDigit HexadecimalDigit
    ;

Constant
    =   IntegerConstant
    |   FloatingConstant
    |   CharacterConstant
    ;

fragment
IntegerConstant
    =   DecimalConstant [IntegerSuffix]
    |   OctalConstant [IntegerSuffix]
    |   HexadecimalConstant [IntegerSuffix]
    ;

fragment
DecimalConstant
    =   NonzeroDigit {Digit}
    ;

fragment
OctalConstant
    =   '0' {OctalDigit}
    ;

fragment
HexadecimalConstant
    =   HexadecimalPrefix [HexadecimalDigit]
    ;

fragment
HexadecimalPrefix
    =   '0' (xX)
    ;

fragment
NonzeroDigit
    =   (1-9)
    ;

fragment
OctalDigit
    =   (0-7)
    ;

fragment
HexadecimalDigit
    =   (0-9a-fA-F)
    ;

fragment
IntegerSuffix
    =   UnsignedSuffix [LongSuffix]
    |   UnsignedSuffix LongLongSuffix
    |   LongSuffix [UnsignedSuffix]
    |   LongLongSuffix [UnsignedSuffix]
    ;

fragment
UnsignedSuffix
    =   (uU)
    ;

fragment
LongSuffix
    =   (lL)
    ;

fragment
LongLongSuffix
    =   'll' | 'LL'
    ;

fragment
FloatingConstant
    =   DecimalFloatingConstant
    |   HexadecimalFloatingConstant
    ;

fragment
DecimalFloatingConstant
    =   FractionalConstant [ExponentPart] [FloatingSuffix]
    |   DigitSequence ExponentPart [FloatingSuffix]
    ;

fragment
HexadecimalFloatingConstant
    =   HexadecimalPrefix HexadecimalFractionalConstant BinaryExponentPart [FloatingSuffix]
    |   HexadecimalPrefix HexadecimalDigitSequence BinaryExponentPart [FloatingSuffix]
    ;

fragment
FractionalConstant
    =   [DigitSequence] '.' DigitSequence
    |   DigitSequence '.'
    ;

fragment
ExponentPart
    =   'e' [Sign] DigitSequence
    |   'E' [Sign] DigitSequence
    ;

fragment
Sign
    =   '+' | '-'
    ;

fragment
DigitSequence
    =   [Digit]-
    ;

fragment
HexadecimalFractionalConstant
    =   [HexadecimalDigitSequence] '.' HexadecimalDigitSequence
    |   HexadecimalDigitSequence '.'
    ;

fragment
BinaryExponentPart
    =   'p' [Sign] DigitSequence
    |   'P' [Sign] DigitSequence
    ;

fragment
HexadecimalDigitSequence
    =   [HexadecimalDigit]-
    ;

fragment
FloatingSuffix
    =   'f' | 'l' | 'F' | 'L'
    ;

fragment
CharacterConstant
    =   '\'' CCharSequence '\''
    |   'L\'' CCharSequence '\''
    |   'u\'' CCharSequence '\''
    |   'U\'' CCharSequence '\''
    ;

fragment
CCharSequence
    =   [CChar]-
    ;

fragment
CChar
    =   -('\\\r\n)
    |   EscapeSequence
    ;
    
fragment
EscapeSequence
    =   SimpleEscapeSequence
    |   OctalEscapeSequence
    |   HexadecimalEscapeSequence
    |   UniversalCharacterName
    ;
fragment
SimpleEscapeSequence
    =   '\\' ('"?abfnrtv\\)
    ;
fragment
OctalEscapeSequence
    =   '\\' OctalDigit
    |   '\\' OctalDigit OctalDigit
    |   '\\' OctalDigit OctalDigit OctalDigit
    ;
fragment
HexadecimalEscapeSequence
    =   '\\x' [HexadecimalDigit]-
    ;
StringLiteral
    =   [EncodingPrefix] '"' [SCharSequence] '"'
    |   [EncodingPrefix] '<' [SCharSequence] '>'
    ;
fragment
EncodingPrefix
    =   'u8'
    |   'u'
    |   'U'
    |   'L'
    ;
fragment
SCharSequence
    =   [SChar]-
    ;
fragment
SChar
    =   -("\\\r\n)
    |   EscapeSequence
    ;

Whitespace
    =   [ \t]-
        -> channel(HIDDEN)
    ;

Newline
    =   (   '\r' ['\n']
        |   '\n'
        )
        -> channel(HIDDEN)
    ;

BlockComment
    =   (* ?...? *)
        -> skip
    ;

LineComment
    =   '//' - { (\r\n) }
        -> skip
    ;
